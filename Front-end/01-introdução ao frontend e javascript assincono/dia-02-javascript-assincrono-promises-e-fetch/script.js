/* Fazendo uma requisi√ß√£o fetch ela deve retorna algo como:
{
    quote:"Alguma coisa"
    author:"Algu√©m"
}
*/

fetch('https://api.goprogram.ai/inspiration') // O link deve esta dentro de Aspas sempre.
    .then(response => response.json())// o RESPONSE.json tambem retorna uma promessa e precisa ser resolvido com outro .Then
    .then(data => console.log(`"${data.quote}" | ${data.author}`));

/*
De olho na dica üëÄ: Voc√™ reparou que usamos dois .then seguidos ap√≥s fazer o fetch? Esse processo √© chamado de encadeamento.
Podemos usar esse recurso retornando um valor dentro de um .then. O valor retornado ser√° recebido pelo pr√≥ximo .
then encadeado. No caso acima, estamos retornando o valor de response.json() para o pr√≥ximo .then, que recebe o valor atrav√©s da vari√°vel data.
*/

//! Adcionalmente pode-se tratar erros com "  .catch((error) => console.log('Erro ao fazer requisi√ß√£o.', error.message)); " o .catch consegue capturar qualquer erro que seja 
//! disparado em qualquer um dos .then sozinhos ou encadeados.